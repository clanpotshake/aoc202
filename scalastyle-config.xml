<!--
If you wish to turn off checking for a section of code, you can put a comment in the source
before and after the section, with the following syntax:
  // scalastyle:off
  ...  // stuff that breaks the styles
  // scalastyle:on
You can also disable only one rule, by specifying its rule id, as specified in:
  http://www.scalastyle.org/rules-0.7.0.html
  // scalastyle:off no.finalize
  override def finalize(): Unit = ...
  // scalastyle:on no.finalize
-->

<!-- shamelessly stolen and modified from apache spark
 https://github.com/apache/spark/blob/master/scalastyle-config.xml -->

<scalastyle>
 <name>Scalastyle standard configuration</name>

 <!-- ================================================================================ -->
 <!--                               rules we enforce                                   -->
 <!-- ================================================================================ -->

 <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"/>

 <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"/>

 <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"/>

 <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"/>

 <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"/>

 <check customId="lineLength" level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
  <parameters>
   <parameter name="maxLineLength">100</parameter>
   <parameter name="tabSize">2</parameter>
   <parameter name="ignoreImports">true</parameter>
  </parameters>
 </check>

 <check customId="methodLength" level="error" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
  <parameters><parameter name="maxLength">55</parameter></parameters>
 </check>

 <check customId="maxFileLength" level="error" class="org.scalastyle.file.FileLengthChecker" enabled="true">
  <parameters><parameter name="maxFileLength">1400</parameter></parameters>
 </check>

 <check customId="numberOfTypes" level="error" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
  <parameters>
   <parameter name="maxTypes">25</parameter>
  </parameters>
 </check>

 <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
  <parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter></parameters>
 </check>

 <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
  <parameters><parameter name="regex"><![CDATA[(config|[A-Z][A-Za-z]*)]]></parameter></parameters>
 </check>

 <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
  <parameters><parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter></parameters>
 </check>

 <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"/>

 <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"/>

 <check level="error" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"/>

 <check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"/>

 <check customId="mutableField" level="error" class="org.scalastyle.scalariform.VarFieldChecker" enabled="false"/>

 <check customId="mutableVariable" level="error" class="org.scalastyle.scalariform.VarLocalChecker" enabled="false"/>

 <check customId="methodType" level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"/>

 <check customId="nonascii" level="error" class="org.scalastyle.scalariform.NonASCIICharacterChecker" enabled="true"/>

 <check level="error" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"/>

 <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
  <parameters>
   <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
  </parameters>
 </check>

 <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
  <parameters>
   <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
  </parameters>
 </check>

 <check customId="extractopt" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
  <parameters><parameter name="regex">extractOpt</parameter></parameters>
  <customMessage>Use jsonOption(x).map(.extract[T]) instead of .extractOpt[T], as the latter
   is slower.  </customMessage>
 </check>

 <check level="error" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true">
  <parameters>
   <parameter name="tokens">COLON, COMMA, RPAREN</parameter>
  </parameters>
 </check>

 <check customId="SingleSpaceBetweenRParenAndLCurlyBrace" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
  <parameters><parameter name="regex">\)\{</parameter></parameters>
  <customMessage><![CDATA[
      Single Space between ')' and `{`.
    ]]></customMessage>
 </check>

 <check customId="OmitBracesInCase" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
  <parameters><parameter name="regex">case[^\n>]*=>\s*\{</parameter></parameters>
  <customMessage>Omit braces in case clauses.</customMessage>
 </check>

 <!-- Avoid Java annotations -->
 <check level="error" class="org.scalastyle.scalariform.OverrideJavaChecker" enabled="true"/>
 <check level="error" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"/>

 <!-- This breaks symbolic method names so we don't turn it on. -->
 <!-- Maybe we should update it to allow basic symbolic names, and then we are good to go. -->
 <check customId="methodNamesChecker" level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
  <parameters>
   <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
  </parameters>
 </check>

 <check customId="cyclomaticChecker" level="error" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
  <parameters><parameter name="maximum">10</parameter></parameters>
 </check>

 <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>

 <!-- ??? usually shouldn't be checked into the code base. -->
 <check level="error" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"/>

 <!-- ================================================================================ -->
 <!--                             rules we've turned off                               -->
 <!-- ================================================================================ -->

 <check customId="argCount" level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="false">
  <parameters><parameter name="maxParameters">10</parameter></parameters>
 </check>

 <check customId="numberOfMethods" level="error" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="false">
  <parameters><parameter name="maxMethods">25</parameter></parameters>
 </check>

 <check level="error" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="false"/>

 <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="false"/>

 <!-- This one complains about all kinds of random things. Disable. -->
 <check level="error" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="false"/>

 <check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="false">
  <parameters>
   <parameter name="singleLineAllowed">true</parameter>
   <parameter name="doubleLineAllowed">true</parameter>
  </parameters>
 </check>

 <check level="error" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="false"/>

 <!-- alerts on dumb things and not on the things we want -->
 <check level="error" class="org.scalastyle.scalariform.NamedArgumentChecker" enabled="false"/>

</scalastyle>
